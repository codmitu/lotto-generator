{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","inp1","setInp1","inp2","setInp2","allCombinations","setAllCombinations","random","setRandom","Container","Wrapper","Input","type","max","value","onChange","e","target","Button","onClick","k","n","result","stack","combine","currentNumber","length","push","pop","newCombo","slice","toString","combinations","num1","num2","arr","i","num","Math","floor","includes","handleRandom","Wrap","map","comb","styled","main","div","input","button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAwEeA,MApEf,WACE,MAAwBC,mBAAiB,GAAzC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAiB,GAAzC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA8CJ,mBAAmB,IAAjE,mBAAOK,EAAP,KAAwBC,EAAxB,KACA,EAA4BN,mBAAiB,IAA7C,mBAAOO,EAAP,KAAeC,EAAf,KA8CA,OACE,eAACC,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,CAAOC,KAAK,SAASC,IAAK,IAAKC,MAAOb,EAAMc,SAT/B,SAACC,GAClBd,GAASc,EAAEC,OAAOH,UASd,cAACH,EAAD,CAAOC,KAAK,SAASC,IAAK,IAAKC,MAAOX,EAAMY,SAP/B,SAACC,GAClBZ,GAASY,EAAEC,OAAOH,UAOd,cAACI,EAAD,CAAQC,QAAS,WA3BrBb,EArBA,SAAsBc,EAAWC,GAC/B,IAAIC,EAAmB,GACnBC,EAAkB,GAiBtB,OAhBA,SAASC,EAAQC,GACf,GAAGF,EAAMG,SAAWN,EAKjBK,EAAgBJ,IAInBE,EAAMI,KAAKF,GACXD,EAAQC,EAAgB,GACxBF,EAAMK,MACNJ,EAAQC,EAAgB,QAZxB,CACE,IAAII,EAAgBN,EAAMO,QAC1BR,EAAOK,KAAKE,EAASE,aAYzBP,CAAQ,GACDF,EAEUU,CA2B2B/B,EAAME,KAAhD,sBACA,cAACe,EAAD,CAAQC,QAAS,kBAzBF,SAACc,EAAcC,GAElC,IADA,IAAMC,EAAgB,GACbC,EAAI,EAAGA,EAAIH,EAAMG,IAAK,CAC7B,IAAMC,EAAMC,KAAKC,MAAMD,KAAK/B,SAAW2B,EAAO,GAC1CC,EAAIK,SAASH,GACfJ,GAAQ,EAGVE,EAAIR,KAAKU,GAEX7B,EAAU2B,EAAIJ,YAeaU,CAAaxC,EAAME,IAA1C,wBACCI,GAAU,4BAAIA,OAEjB,cAACmC,EAAD,UACGrC,EAAgBsC,KAAI,SAACC,EAAMR,GAAP,OACnB,+BAAeQ,GAAJR,YASf3B,EAAYoC,IAAOC,KAAV,4BAETpC,EAAUmC,IAAOE,IAAV,2RAcPpC,EAAQkC,IAAOG,MAAV,kGAKL9B,EAAS2B,IAAOI,OAAV,oOAWNP,EAAOG,IAAOE,IAAV,mMC5FKG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aa88cd95.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\n\nfunction App() {\n  const [inp1, setInp1] = useState<number>(0)\n  const [inp2, setInp2] = useState<number>(0)\n  const [allCombinations, setAllCombinations] = useState<number[]>([])\n  const [random, setRandom] = useState<string>(\"\")\n\n  function handleCombinations(num1: number, num2: number) { \n    function combinations(k: number, n: number) {\n      let result: number[] = []\n      let stack: number[] = []\n      function combine(currentNumber: number){\n        if(stack.length === k) {\n          let newCombo: any = stack.slice()\n          result.push(newCombo.toString());\n          return;\n        }\n        if(currentNumber > n) {\n          return;\n        }\n    \n        stack.push(currentNumber)\n        combine(currentNumber + 1);  \n        stack.pop();\n        combine(currentNumber + 1);\n      }\n      combine(1);\n      return result;\n    }\n    setAllCombinations(combinations(num1, num2))\n  }\n\n  const handleRandom = (num1: number, num2: number) => {\n    const arr: number[] = []\n    for (let i = 0; i < num1; i++) {\n      const num = Math.floor(Math.random() * num2 + 1)\n      if (arr.includes(num)) {\n        num1 += 1\n        continue\n      }\n      arr.push(num)\n    }\n    setRandom(arr.toString())\n  }\n\n  const handleInp1 = (e: React.ChangeEvent<HTMLInputElement>): void =>  {\n    setInp1(+e.target.value)\n  }\n  const handleInp2 = (e: React.ChangeEvent<HTMLInputElement>): void =>  {\n    setInp2(+e.target.value)\n  }\n  return (\n    <Container>\n      <Wrapper>\n        <Input type=\"number\" max={100} value={inp1} onChange={handleInp1}/>\n        <Input type=\"number\" max={100} value={inp2} onChange={handleInp2}/>\n        <Button onClick={() => handleCombinations(inp1, inp2)}>Generate</Button>\n        <Button onClick={() => handleRandom(inp1, inp2)}>Get Random</Button>\n        {random && <p>{random}</p>}\n      </Wrapper>\n      <Wrap>\n        {allCombinations.map((comb, i) => (\n          <span key={i}>{comb}</span>\n        ))}\n      </Wrap>\n    </Container>\n  );\n}\n\nexport default App;\n\nconst Container = styled.main`\n`\nconst Wrapper = styled.div`\n  background-image: radial-gradient(yellow, lime);\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n  >p {\n    position: absolute;\n    top: 30vh;\n    margin: auto;\n    font-size: 1.5rem;\n  }\n`\nconst Input = styled.input`\n  width: 60px;\n  padding: 10px 0px 10px 20px;\n  font-size: 1.5rem;\n`\nconst Button = styled.button`\n  border: 2px solid orange;\n  background-color: lightcoral;\n  padding: 15px 20px;\n  text-transform: uppercase;\n  cursor: pointer;\n  color: white;\n  &:hover {\n    background-color: coral;\n  }\n`\nconst Wrap = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  >span {\n    margin: 5px;\n    padding: 0 10px;\n    outline: 1px solid darkgray;\n    flex: 1;\n    text-align: center;\n  }\n`\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}